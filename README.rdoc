= Validates Captcha

An image captcha verification approach for Rails apps, directly integrated into 
ActiveRecord's validation mechanism and providing helpers for ActionController 
and ActionView.

RDoc documentation (including this README as start page) can be found at 
http://m4n.github.com/validates_captcha



== Basic Usage

Validates Captcha extends ActiveRecord, ActionController and ActionView with 
helper methods that make it a snap to integrate captcha verification in your 
Rails application.

Step #1: Extend the form of your view with the necessary captcha code display 
and input logic.

  # app/views/comments/new.html.erb
  <% form_for @comment do |f| %>
    <%= f.error_messages %>

    <!-- standard input fields: -->
    <p>
      <%= f.label :name %><br />
      <%= f.text_field :name %>
    </p>    
    <!-- ... -->
    
    <!-- now something new: -->
    <p>
      <%= f.label :captcha %><br />
      <%= f.captcha_image %>
      <%= f.captcha_field %>
    </p>
    
    <p>
      <%= f.submit 'Create' %>
    </p>
  <% end %>

Step #2: Tell the controller that you want to validate 
captchas.

  class CommentsController < ApplicationController
    validates_captcha
    
    def create
      # scaffold comment creation code ...
    end
    
    # more actions here ...
  end
  
This activates captcha validation in every action of the controller 
whenever an instance of class +Comment+ is saved.

Step #3: There's no step three!

To summarize: Put the following in your view.

  <%= f.captcha_image %>
  <%= f.captcha_field %>
  
And what you see below in the corresponding controller.

  validates_captcha

Done.

== Customization

Because the +validates_captcha+ controller method internally creates an 
around filter, you can (de)activate captcha validation for specific actions.

  validates_captcha :only => [:create, :update]
  validates_captcha :except => :reset

The class for which captcha validation is activated is derived from 
the name of the controller. So putting +validates_captcha+ in a 
+UsersController+ validates instances of the +User+ class.

You can customize the validated class using the +validates_captcha_of+ method.

  class ArticlesController < ApplicationController
    validates_captcha_of Post
    validates_captcha_of :blog_entries, :except => :persist
    validates_captcha_of 'users', :only => :store
  end
  
Two kinds of errors are added to the model if captcha validation fails: 
+:blank+ if no captcha code is submitted and +:invalid+ if a captcha code 
is submitted but does not match the code displayed on the captcha image. 
You can localize the error messages for the captcha as you usually do 
for the other attributes.

  models:
    comment:
      attributes:
        captcha:
          blank: 'must not be empty'
          invalid: 'does not match the code displayed on the image'

What if the captcha's text is unreadable? There's also a form helper 
method for captcha regeneration available. You can call it like this.

  <p>
    Captcha code unreadable? <%= f.regenerate_captcha_link %>
  </p>

This generates an anchor tag that, when clicked, generates a new 
captcha and updates the image. It makes an AJAX request to fetch a 
new captcha code and updates the captcha image after the request is complete.

+regenerate_captcha_link+ internally calls Rails' #link_to_remote helper 
method. So it relies on the Prototype javascript framework to be available 
on the page.

The anchor's text defaults to 'Regenerate Captcha'. You can set this to 
a custom value by providing a +:text+ key in the options hash.

  <%= f.regenerate_captcha_link :text => 'Another captcha, please' %>

By default, captchas have a length of 6 characters and the text displayed 
on the captcha image is created by randomly selecting characters from a 
predefined alphabet constisting of visually distinguishable letters and digits.

The number of characters and the alphabet used when generating strings can 
be customized. Just put the following in a Rails initializer and adjust the 
values to your needs.

  ValidatesCaptcha::StringGenerator::Simple.alphabet = '01'
  ValidatesCaptcha::StringGenerator::Simple.length = 8

Apart from controllers, you can activate captcha validation for a model 
using the class level +with_captcha_validation+ method added to 
ActiveRecord::Base.

  Comment.with_captcha_validation do
    @comment = Comment.new(...)
    @comment.save
  end
  
This activates captcha validation on entering the block and deactivates it 
on leaving the block.

Two new attribute like methods are added to ActiveRecord: +captcha+ and 
+encrypted_captcha+.  Those are made +attr_accessible+.  The latter is 
initialized to a randomly generated and encrypted captcha code on 
instantation. 

For a record to be valid, the value assigned to +captcha=+ must match the 
decryption of the return value of +encrypted_captcha+.  Within a 
+with_captcha_validation+ block, calling +valid?+ (as is done by +save+, 
+update_attributes+, etc.) will also validate the value of +captcha+ 
against the +encrypted_captcha+.  Outside +with_captcha_validation+, no 
captcha validation is performed.



== Extensibility

Validates Captcha delegates tasks like string and image generation, 
encryption/decryption of captcha codes, and responding to captcha requests 
to dedicated backend classes.

Those classes can easily be replaced by your custom implementations.  So 
you can achieve stronger encryption, can use a word list as captcha text 
generation source, or can replace the captcha image generator with one 
that creates images that are harder to crack.

Please see the documentation of the following classes for further information.

* ValidatesCaptcha::StringGenerator::Simple
* ValidatesCaptcha::ReversibleEncrypter::Simple
* ValidatesCaptcha::ImageGenerator::Simple
* ValidatesCaptcha::Middleware::Simple



== Dependencies

Using a Rack middleware to speed up the request/response cycle when fetching 
captcha images, Validates Captcha requires Rails version 2.3 or greater.

The default captcha image generator uses ImageMagick's +convert+ command to 
create the captcha.  So a recent and properly configured version of ImageMagick 
must be installed on the system.  The version used while developing was 6.4.5.  
But you are not bound to ImageMagick.  If you want to provide a custom image 
generator, take a look at the documentation for 
ValidatesCaptcha::ImageGenerator::Simple on how to create your own.



== Download

The latest version of Validates Captcha can be found at 
http://github.com/m4n/validates_captcha

Documentation can be generated from its distribution directory with the 
following command.

  % [sudo] rake rdoc

Tests can be executed from its distribution directory with the 
following command.

  % [sudo] rake test



== Installation

You can install Validates Captcha as a Rails plugin with the following command.

  % ./script/plugin install git://github.com/m4n/validates_captcha.git
  
Or you can install it as a Gem with

  % [sudo] gem install validates_captcha

and then configure it in your +environment.rb+ file as shown below.

  Rails::Initializer.run do |config|
    # ...
    config.gem 'validates_captcha'
    # ...
  end



== License

Validates Captcha is released under the MIT license.



== Copyright

Copyright (c) 2009 Martin Andert

